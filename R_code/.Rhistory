source("experimentalRunScriptCreator.R")
# Script which creates the experimental run for the literature test suite.
# Seeds per run decreases for larger dimensions as it takes longer to run,
# this is done so that each experimental specification takes a similar amount of
# time to run.
for(dim in 1:50){
if(!file.exists(paste0("../data/availableFunctions/biSourceDim", dim, ".txt"))){next}
functions <- read.table(paste0("../data/availableFunctions/biSourceDim", dim, ".txt"), header = FALSE, sep = " ", fill = TRUE)[[1]]
if(dim <= 4){seedsPerRun <- 20}
else if(dim <= 9){seedsPerRun <- 10}
else if(dim <= 15){seedsPerRun <- 5}
else{seedsPerRun <- 2}
runData <- createScriptStructure(functions, 5*dim, 4*dim, dim*10, 20, seedsPerRun, TRUE, TRUE)
if(dim != 1){
existingRunData <- read.table("../data/runScripts/litSuiteTesting.txt", header = TRUE, sep = " ", fill = TRUE)
runData <- rbind(existingRunData, runData)
}
write.table(runData, "../data/runScripts/litSuiteTesting.txt", quote = FALSE, row.names = FALSE)
}
print("Created literature suite experimental script.")
setwd("~/Documents/GitHubRepositories/Bifidelity-Surrogate-Modelling/R_code")
source("experimentalRunScriptCreator.R")
# Script which creates the experimental run for the literature test suite.
# Seeds per run decreases for larger dimensions as it takes longer to run,
# this is done so that each experimental specification takes a similar amount of
# time to run.
for(dim in 1:50){
if(!file.exists(paste0("../data/availableFunctions/biSourceDim", dim, ".txt"))){next}
functions <- read.table(paste0("../data/availableFunctions/biSourceDim", dim, ".txt"), header = FALSE, sep = " ", fill = TRUE)[[1]]
if(dim <= 4){seedsPerRun <- 20}
else if(dim <= 9){seedsPerRun <- 10}
else if(dim <= 15){seedsPerRun <- 5}
else{seedsPerRun <- 2}
runData <- createScriptStructure(functions, 5*dim, 4*dim, dim*10, 20, seedsPerRun, TRUE, TRUE)
if(dim != 1){
existingRunData <- read.table("../data/runScripts/litSuiteTesting.txt", header = TRUE, sep = " ", fill = TRUE)
runData <- rbind(existingRunData, runData)
}
write.table(runData, "../data/runScripts/litSuiteTesting.txt", quote = FALSE, row.names = FALSE)
}
print("Created literature suite experimental script.")
source("dataProcessor.R")
source("plotFeatures.R")
source("plotPerformance.R")
# This script takes the results stored in the files litSuiteTesting and
# processes them. That is it takes the results of the literature suite
# experiments and plots the instance features and the performance of the
# models.
graphScale <- 0.7
literatureTestSuiteResults <- combineAndProcessResults("litSuiteTesting", 1, 906)
# Add columns for information when plotting features
literatureTestSuiteResults$pch = 16
literatureTestSuiteResults$legend = "Fixed"
literatureTestSuiteResults$col = "black"
literatureTestSuiteResults[str_which(literatureTestSuiteResults$instance, "Wang", negate = FALSE), "pch"] = 17
literatureTestSuiteResults[str_which(literatureTestSuiteResults$instance, "Wang", negate = FALSE), "legend"] = "Error-based"
literatureTestSuiteResults[str_which(literatureTestSuiteResults$instance, "Wang", negate = FALSE), "col"] = "sienna3"
literatureTestSuiteResults[str_which(literatureTestSuiteResults$instance, "Toal", negate = FALSE), "pch"] = 15
literatureTestSuiteResults[str_which(literatureTestSuiteResults$instance, "Toal", negate = FALSE), "legend"] = "Parameter-based"
literatureTestSuiteResults[str_which(literatureTestSuiteResults$instance, "Toal", negate = FALSE), "col"] = "sienna4"
# Plot feature graphs
plotFeatures(literatureTestSuiteResults, "litSuiteTestingFeatures", mult = graphScale)
# Add columns of information when plotting model performance
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Co-Kriging", "pch"] <- 17
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Co-Kriging", "col"] <- "green4"
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Co-Kriging", "legend"] <- "Co-Kriging"
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Tied", "pch"] <- 16
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Tied", "col"] <- "darkgoldenrod1"
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Tied", "legend"] <- "Tied"
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Kriging", "pch"] <- 15
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Kriging", "col"] <- "red"
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Kriging", "legend"] <- "Kriging"
# Plot performance graphs
plotPerformance(literatureTestSuiteResults, "litSuiteTestingFeatures", mult = graphScale)
library(stringr)
literatureTestSuiteResults$pch = 16
literatureTestSuiteResults$legend = "Fixed"
literatureTestSuiteResults$col = "black"
literatureTestSuiteResults[str_which(literatureTestSuiteResults$instance, "Wang", negate = FALSE), "pch"] = 17
literatureTestSuiteResults[str_which(literatureTestSuiteResults$instance, "Wang", negate = FALSE), "legend"] = "Error-based"
literatureTestSuiteResults[str_which(literatureTestSuiteResults$instance, "Wang", negate = FALSE), "col"] = "sienna3"
literatureTestSuiteResults[str_which(literatureTestSuiteResults$instance, "Toal", negate = FALSE), "pch"] = 15
literatureTestSuiteResults[str_which(literatureTestSuiteResults$instance, "Toal", negate = FALSE), "legend"] = "Parameter-based"
literatureTestSuiteResults[str_which(literatureTestSuiteResults$instance, "Toal", negate = FALSE), "col"] = "sienna4"
library(ggplot2)
source("dataProcessor.R")
source("plotFeatures.R")
source("plotPerformance.R")
# This script takes the results stored in the files litSuiteTesting and
# processes them. That is it takes the results of the literature suite
# experiments and plots the instance features and the performance of the
# models.
graphScale <- 0.7
literatureTestSuiteResults <- combineAndProcessResults("litSuiteTesting", 1, 906)
# Add columns for information when plotting features
literatureTestSuiteResults$pch = 16
literatureTestSuiteResults$legend = "Fixed"
literatureTestSuiteResults$col = "black"
literatureTestSuiteResults[str_which(literatureTestSuiteResults$instance, "Wang", negate = FALSE), "pch"] = 17
literatureTestSuiteResults[str_which(literatureTestSuiteResults$instance, "Wang", negate = FALSE), "legend"] = "Error-based"
literatureTestSuiteResults[str_which(literatureTestSuiteResults$instance, "Wang", negate = FALSE), "col"] = "sienna3"
literatureTestSuiteResults[str_which(literatureTestSuiteResults$instance, "Toal", negate = FALSE), "pch"] = 15
literatureTestSuiteResults[str_which(literatureTestSuiteResults$instance, "Toal", negate = FALSE), "legend"] = "Parameter-based"
literatureTestSuiteResults[str_which(literatureTestSuiteResults$instance, "Toal", negate = FALSE), "col"] = "sienna4"
# Plot feature graphs
plotFeatures(literatureTestSuiteResults, "litSuiteTestingFeatures", mult = graphScale)
# Add columns of information when plotting model performance
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Co-Kriging", "pch"] <- 17
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Co-Kriging", "col"] <- "green4"
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Co-Kriging", "legend"] <- "Co-Kriging"
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Tied", "pch"] <- 16
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Tied", "col"] <- "darkgoldenrod1"
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Tied", "legend"] <- "Tied"
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Kriging", "pch"] <- 15
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Kriging", "col"] <- "red"
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Kriging", "legend"] <- "Kriging"
# Plot performance graphs
plotPerformance(literatureTestSuiteResults, "litSuiteTestingFeatures", mult = graphScale)
source("dataProcessor.R")
source("plotFeatures.R")
source("plotPerformance.R")
# This script takes the results stored in the files litSuiteTesting and
# processes them. That is it takes the results of the literature suite
# experiments and plots the instance features and the performance of the
# models.
graphScale <- 0.7
literatureTestSuiteResults <- combineAndProcessResults("litSuiteTesting", 1, 906)
# Add columns for information when plotting features
literatureTestSuiteResults$pch = 16
literatureTestSuiteResults$legend = "Fixed"
literatureTestSuiteResults$col = "black"
literatureTestSuiteResults[str_which(literatureTestSuiteResults$instance, "Wang", negate = FALSE), "pch"] = 17
literatureTestSuiteResults[str_which(literatureTestSuiteResults$instance, "Wang", negate = FALSE), "legend"] = "Error-based"
literatureTestSuiteResults[str_which(literatureTestSuiteResults$instance, "Wang", negate = FALSE), "col"] = "sienna3"
literatureTestSuiteResults[str_which(literatureTestSuiteResults$instance, "Toal", negate = FALSE), "pch"] = 15
literatureTestSuiteResults[str_which(literatureTestSuiteResults$instance, "Toal", negate = FALSE), "legend"] = "Parameter-based"
literatureTestSuiteResults[str_which(literatureTestSuiteResults$instance, "Toal", negate = FALSE), "col"] = "sienna4"
# Plot feature graphs
plotFeatures(literatureTestSuiteResults, "litSuiteTestingFeatures", mult = graphScale)
# Add columns of information when plotting model performance
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Co-Kriging", "pch"] <- 17
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Co-Kriging", "col"] <- "green4"
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Co-Kriging", "legend"] <- "Co-Kriging"
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Tied", "pch"] <- 16
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Tied", "col"] <- "darkgoldenrod1"
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Tied", "legend"] <- "Tied"
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Kriging", "pch"] <- 15
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Kriging", "col"] <- "red"
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Kriging", "legend"] <- "Kriging"
# Plot performance graphs
plotPerformance(literatureTestSuiteResults, "litSuiteTestingFeatures", mult = graphScale)
library(grid)
source("dataProcessor.R")
source("plotFeatures.R")
source("plotPerformance.R")
# This script takes the results stored in the files litSuiteTesting and
# processes them. That is it takes the results of the literature suite
# experiments and plots the instance features and the performance of the
# models.
graphScale <- 0.7
literatureTestSuiteResults <- combineAndProcessResults("litSuiteTesting", 1, 906)
# Add columns for information when plotting features
literatureTestSuiteResults$pch = 16
literatureTestSuiteResults$legend = "Fixed"
literatureTestSuiteResults$col = "black"
literatureTestSuiteResults[str_which(literatureTestSuiteResults$instance, "Wang", negate = FALSE), "pch"] = 17
literatureTestSuiteResults[str_which(literatureTestSuiteResults$instance, "Wang", negate = FALSE), "legend"] = "Error-based"
literatureTestSuiteResults[str_which(literatureTestSuiteResults$instance, "Wang", negate = FALSE), "col"] = "sienna3"
literatureTestSuiteResults[str_which(literatureTestSuiteResults$instance, "Toal", negate = FALSE), "pch"] = 15
literatureTestSuiteResults[str_which(literatureTestSuiteResults$instance, "Toal", negate = FALSE), "legend"] = "Parameter-based"
literatureTestSuiteResults[str_which(literatureTestSuiteResults$instance, "Toal", negate = FALSE), "col"] = "sienna4"
# Plot feature graphs
plotFeatures(literatureTestSuiteResults, "litSuiteTestingFeatures", mult = graphScale)
# Add columns of information when plotting model performance
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Co-Kriging", "pch"] <- 17
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Co-Kriging", "col"] <- "green4"
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Co-Kriging", "legend"] <- "Co-Kriging"
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Tied", "pch"] <- 16
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Tied", "col"] <- "darkgoldenrod1"
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Tied", "legend"] <- "Tied"
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Kriging", "pch"] <- 15
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Kriging", "col"] <- "red"
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Kriging", "legend"] <- "Kriging"
# Plot performance graphs
plotPerformance(literatureTestSuiteResults, "litSuiteTestingFeatures", mult = graphScale)
library(egg)
source("dataProcessor.R")
source("plotFeatures.R")
source("plotPerformance.R")
# This script takes the results stored in the files litSuiteTesting and
# processes them. That is it takes the results of the literature suite
# experiments and plots the instance features and the performance of the
# models.
graphScale <- 0.7
literatureTestSuiteResults <- combineAndProcessResults("litSuiteTesting", 1, 906)
# Add columns for information when plotting features
literatureTestSuiteResults$pch = 16
literatureTestSuiteResults$legend = "Fixed"
literatureTestSuiteResults$col = "black"
literatureTestSuiteResults[str_which(literatureTestSuiteResults$instance, "Wang", negate = FALSE), "pch"] = 17
literatureTestSuiteResults[str_which(literatureTestSuiteResults$instance, "Wang", negate = FALSE), "legend"] = "Error-based"
literatureTestSuiteResults[str_which(literatureTestSuiteResults$instance, "Wang", negate = FALSE), "col"] = "sienna3"
literatureTestSuiteResults[str_which(literatureTestSuiteResults$instance, "Toal", negate = FALSE), "pch"] = 15
literatureTestSuiteResults[str_which(literatureTestSuiteResults$instance, "Toal", negate = FALSE), "legend"] = "Parameter-based"
literatureTestSuiteResults[str_which(literatureTestSuiteResults$instance, "Toal", negate = FALSE), "col"] = "sienna4"
# Plot feature graphs
plotFeatures(literatureTestSuiteResults, "litSuiteTestingFeatures", mult = graphScale)
# Add columns of information when plotting model performance
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Co-Kriging", "pch"] <- 17
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Co-Kriging", "col"] <- "green4"
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Co-Kriging", "legend"] <- "Co-Kriging"
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Tied", "pch"] <- 16
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Tied", "col"] <- "darkgoldenrod1"
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Tied", "legend"] <- "Tied"
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Kriging", "pch"] <- 15
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Kriging", "col"] <- "red"
literatureTestSuiteResults[literatureTestSuiteResults$superiorModel == "Kriging", "legend"] <- "Kriging"
# Plot performance graphs
plotPerformance(literatureTestSuiteResults, "litSuiteTestingFeatures", mult = graphScale)
